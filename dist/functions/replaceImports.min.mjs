import strBeforeLast from"../utilities/strBeforeLast";import makeFilepath from"./makeFilepath.mjs";import fileExists from"./fileExists.mjs";import makeCommon from"./makeCommon.mjs";import regexEscape from"./regexEscape.mjs";import makeRelativePath from"./makeRelativePath.mjs";export const replaceImports=(e,t,m,r={})=>(m,s)=>{if(!s.file)return console.error("Unable to find module",e,s),m;let o=makeRelativePath(e,s.file),a=t;(a.endsWith(".js")||a.endsWith(".mjs"))&&(a=strBeforeLast(a,"/"));let i=makeFilepath(a,o);fileExists(i)||((i.endsWith(".js")||i.endsWith(".mjs"))&&(i=strBeforeLast(i,"/")),makeCommon(s.file,i,r));const l=regexEscape(s.module),p=new RegExp(`(['"\`])${l}['"\`]`);if(s.module.includes("${")){const e=l.replace(/(\\\$\\{.+\\})+/g,".+"),t=new RegExp(`(.+/)(${e})(/.+)`,"g");o=o.replace(t,"$1"+s.module+"$3")}return m.replace(p,`$1${o}$1`)};export default replaceImports;