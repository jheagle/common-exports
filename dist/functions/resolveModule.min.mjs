import{readdirSync,statSync}from"fs";import{strAfterLast}from"../utilities/strAfterLast";import{makeFilepath}from"../utilities/makeFilepath";import{fileExists}from"test-filesystem";import{regexEscape}from"../utilities/regexEscape";import{strBeforeLast}from"../utilities/strBeforeLast";import{makeRelativePath}from"../utilities/makeRelativePath";const modulesDirectory="node_modules";export const resolveModule=(e,t,i="")=>{e=makeFilepath(e),i||(i=e);let s=!0;t.startsWith("#")&&(t=t.slice(1),i=makeFilepath(i,"vendor"),s=!1),t.startsWith("./")&&(t=t.slice(2),s=!1),t.startsWith("../")&&(t=t.slice(3),s=!1),s&&(t=makeRelativePath(e,t));let r=makeFilepath(i,strBeforeLast(t,"/"));if(fileExists(r)){let e=t.includes("/")?strAfterLast(t,"/"):t;e=makeFilepath(e),e=regexEscape(e),e.includes("\\$\\{")&&(e=e.replace(/(\\\$\\{.+\\})+/g,".+"));const i=new RegExp(`^${e}$`);if(statSync(r).isDirectory()){const e=readdirSync(r).filter((e=>i.test(e)));if(e.length)return e.map((e=>makeFilepath(r,e))).filter(fileExists)}}if("node_modules"===i)return[];"node_modules"===strAfterLast(i,"/")&&(i=makeFilepath(i,"../../"));const a=makeFilepath(i,"node_modules");return a!==e&&a?resolveModule(e,t,a):[]};