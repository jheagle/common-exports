import{readdirSync}from"fs";import strAfterLast from"../utilities/strAfterLast";import makeFilepath from"./makeFilepath.mjs";import fileExists from"./fileExists.mjs";import regexEscape from"./regexEscape.mjs";import strBeforeLast from"../utilities/strBeforeLast";import makeRelativePath from"./makeRelativePath.mjs";const modulesDirectory="node_modules";export const resolveModule=(e,t,s="")=>{e=makeFilepath(e),s||(s=e);let r=!0;t.startsWith("#")&&(t=t.slice(1),s=makeFilepath(s,"vendor"),r=!1),t.startsWith("./")&&(t=t.slice(2),r=!1),t.startsWith("../")&&(t=t.slice(3),r=!1),r&&(t=makeRelativePath(e,t));let i=makeFilepath(s,strBeforeLast(t,"/"));if(fileExists(i)){let e=t.includes("/")?strAfterLast(t,"/"):t;e=makeFilepath(e),e=regexEscape(e),e.includes("\\$\\{")&&(e=e.replace(/(\\\$\\{.+\\})+/g,".+"));const s=new RegExp(`^${e}$`),r=readdirSync(i).filter((e=>s.test(e)));if(r.length)return r.map((e=>makeFilepath(i,e))).filter(fileExists)}if("node_modules"===s)return[];"node_modules"===strAfterLast(s,"/")&&(s=makeFilepath(s,"../../"));const a=makeFilepath(s,"node_modules");return a!==e&&a?resolveModule(e,t,a):[]};export default resolveModule;